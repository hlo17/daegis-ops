#!/usr/bin/env bash
set -euo pipefail

usage(){ echo "usage: ledgerdiff [--same-day] [--from YYYY-MM-DD] [--dry-run] [--verbose] <Ledger.md>"; exit 1; }

allow_same_day=0; from_date=""; dry_run=0; verbose=0; file=""
while [[ $# -gt 0 ]]; do
  case "$1" in
    --same-day) allow_same_day=1; shift ;;
    --from)     from_date="${2:-}"; shift 2 ;;
    --dry-run)  dry_run=1; shift ;;
    --verbose|-v) verbose=1; shift ;;
    -h|--help)  usage ;;
    *)          file="$1"; shift ;;
  esac
done
[[ -n "${file}" ]] || usage
[[ -f "${file}" ]] || touch "${file}"

pp(){ [[ $verbose -eq 1 ]] && echo "[ledgerdiff] $*"; }

# 既存の最新日付
if [[ -n "${from_date}" ]]; then
  last_date="${from_date}"
else
  last_date="$(grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2}:' "${file}" 2>/dev/null \
               | sed -E 's/^([0-9]{4}-[0-9]{2}-[0-9]{2}):.*/\1/' \
               | sort | tail -n1)"
  last_date="${last_date:-0000-00-00}"
fi
pp "threshold date = ${last_date} (same-day=${allow_same_day})"

tmp_exist="$(mktemp)"; tmp_new="$(mktemp)"; trap 'rm -f "$tmp_exist" "$tmp_new"' EXIT
grep -E '^[0-9]{4}-[0-9]{2}-[0-9]{2}:' "${file}" 2>/dev/null >"$tmp_exist" || true

# STDIN → 正規行のみ
awk '/^[0-9]{4}-[0-9]{2}-[0-9]{2}:[[:space:]]/ {print}' \
| awk -v LD="${last_date}" -v SD="${allow_same_day}" -F: '
  function ge(a,b){return a>=b}
  function gt(a,b){return a>b}
  { date=$1; if ((SD=="1" && ge(date,LD)) || (SD!="1" && gt(date,LD))) print $0 }
' \
| sed 's/[[:space:]]\+$//' \
| sort -r \
| uniq > "$tmp_new"

# 完全一致重複を落とした“最終候補”
if [[ -s "$tmp_new" ]]; then
  mapfile -t filtered < <(grep -Fvxf "$tmp_exist" "$tmp_new" || true)
else
  filtered=()
fi

count="${#filtered[@]}"
if [[ $count -eq 0 ]]; then
  echo "no new lines to append (threshold >= ${last_date})."
  exit 0
fi

echo "ready to append: ${count} line(s) -> ${file}"
if [[ $verbose -eq 1 ]]; then
  printf '%s\n' "${filtered[@]}" | sed 's/^/  + /'
fi

if [[ $dry_run -eq 1 ]]; then
  echo "(dry-run) nothing written."
  exit 0
fi

# 末尾改行ケア
if [[ -s "${file}" ]] && [[ "$(tail -c1 "${file}" || true)" != $'\n' ]]; then
  echo >> "${file}"
fi
printf '%s\n' "${filtered[@]}" >> "${file}"
echo "appended: ${count} line(s) -> ${file}"
