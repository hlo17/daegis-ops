import os
from typing import List, Dict, Any
from fastapi import FastAPI
from fastapi.routing import APIRoute
from roundtable_orchestrator import vote_all, select_coordinator
from compressor_arbitrator import compress_proposal, arbitrate
print("[rt] orchestrate_patch: module imported")
def _remove_post_orchestrate(app: FastAPI):
    removed = 0
    for route in list(app.router.routes):
        if isinstance(route, APIRoute) and route.path == "/orchestrate":
            app.router.routes.remove(route)
            removed += 1
    print(f"[rt] Removed {removed} /orchestrate POST routes")
def register(app: FastAPI):
    print("[rt] orchestrate_patch.register() called")
    @app.get("/rt_patch_alive")
    async def _alive():
        return {"ok": True, "source": "orchestrate_patch"}
    @app.get("/rt_routes")
    async def _routes():
        details = []
        for r in app.router.routes:
            if isinstance(r, APIRoute):
                details.append({
                    "path": r.path,
                    "methods": sorted(list(r.methods)),
                    "endpoint": getattr(r.endpoint, "__name__", "anon"),
                    "module": getattr(r.endpoint, "__module__", "unknown")
                })
        return {"count": len(details), "routes": details}
    _remove_post_orchestrate(app)
    @app.post("/orchestrate")
    async def orchestrate(payload: Dict[str, Any]):
        task = payload.get("task", "")
        votes: List[Dict[str, Any]] = await vote_all(task, timeout_s=30.0)
        if not votes:
            votes = [{"ai_name": "Grok4", "scores": {"speed": 8, "quality": 9, "creativity": 7, "confidence": 8}, "why": "mock", "needed_inputs": [], "constraints": []}]
        hist = {
            "Grok4": {"lead_time": 120, "rework_count": 0.5, "user_rating": 4.8},
            "ChatGPT": {"lead_time": 90, "rework_count": 1.0, "user_rating": 4.2},
            "Perplexity": {"lead_time": 80, "rework_count": 1.2, "user_rating": 4.0},
        }
        coordinator = select_coordinator(votes, hist, alpha=0.6)
        compressed = [compress_proposal(task, v["ai_name"], "seed") for v in votes]
        if not compressed:
            return {
                "task": task,
                "coordinator": None,
                "arbitrated": {"summary_len": 0, "note": "no_proposals"},
                "status": "ok"
            }
        arb = arbitrate(
            compressed,
            speed_priority=True,
            quality_priority=False,
            task_description=task
        )
        try:
            pass
        except Exception:
            pass
        _orch_log(task, votes, coordinator, arb.dict() if arb else {}, "orchestrate_patch",
                  arb_backend="openai",
                  rt_agents=os.getenv("RT_AGENTS", "unknown"),
                  latency_ms=locals().get("_lat", 0),
                  status="ok")
        return {
            "task": task,
            "votes": votes,
            "coordinator": coordinator,
            "arbitrated": arb.dict() if arb else None,
            "source": "orchestrate_patch",
            "next": "coordinatorが実行計画を作成 → Slack返信（未実装）"
        }
    post = [r for r in app.router.routes if isinstance(r, APIRoute) and r.path == "/orchestrate"]
    print(f"[rt] Post-registration /orchestrate routes: {len(post)}")
