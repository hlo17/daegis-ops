#!/usr/bin/env sh
# L13: Canary Orchestrator (append-only, stdlib only)
set -eu
LOG_DIR="logs"; FLAG_DIR="flags"; OUT_ENV="scripts/dev/env_canary.sh"
PLAN="logs/policy_apply_plan.jsonl"; CAND="scripts/dev/env_candidates.sh"
PCT="${AUTO_TUNE_CANARY_PCT:-5}"
mkdir -p "$LOG_DIR" "$FLAG_DIR" "$(dirname "$OUT_ENV")"
ts() { date -u +%FT%TZ; }

start() {
  [ -f "$CAND" ] || { echo "[canary] no candidates"; exit 0; }
  echo "# Autogenerated at $(ts)" > "$OUT_ENV"
  echo "export AUTO_TUNE_CANARY_PCT=${PCT}" >> "$OUT_ENV"
  intents=""
  TMP="$(mktemp)"
  awk '
    match($0, /^export[[:space:]]+DAEGIS_SLA_([A-Z0-9_]+)_MS=([0-9.]+)/, m) { 
      it=m[1]; ms=m[2]; 
      gsub(/[ \t\r\n]+/,"",it); gsub(/[ \t\r\n]+/,"",ms);
      print tolower(it) " " ms 
    }
  ' "$CAND" | awk '!seen[$0]++' > "$TMP"
  while read -r IT MS; do
    [ -n "$IT" ] || continue
    echo "export DAEGIS_SLA_${IT^^}_MS=${MS}" >> "$OUT_ENV"
    intents="${intents}${intents:+,}${IT}"
    printf '{"event":"canary_start","t":"%s","intent":"%s","pct":%s,"proposed_ms":%s}\n' "$(ts)" "$IT" "$PCT" "$MS" \
      >> "${LOG_DIR}/auto_tune_canary.jsonl"
  done < "$TMP"
  rm -f "$TMP"
  # de-dup and normalize
  clean_ints="$(echo "$intents" | tr ',' '\n' | awk 'NF{a[$1]=1}END{for(k in a) print k}' | sort | paste -sd',' -)"
  echo "export AUTO_TUNE_CANARY_INTENTS=${clean_ints}" >> "$OUT_ENV"
  touch "${FLAG_DIR}/CANARY_ON"
  echo "[canary] started â†’ ${OUT_ENV} (intents=${clean_ints:-none}, pct=${PCT})"
}

revoke() {
  rm -f "${FLAG_DIR}/CANARY_ON" || true
  [ -f "$OUT_ENV" ] && mv -f "$OUT_ENV" "${OUT_ENV}.bak.$(date +%s)" || true
  printf '{"event":"canary_revoke","t":"%s"}\n' "$(ts)" >> "${LOG_DIR}/auto_tune_revoke.jsonl"
  echo "[canary] revoked"
}

case "${1:-start}" in
  start) start ;;
  revoke) revoke ;;
  *) echo "usage: $0 {start|revoke}"; exit 2 ;;
esac
exit 0